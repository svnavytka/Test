class MyBigInt:
    def __init__(self):
        self.data = []

    # Метод для встановлення числа за шістнадцятковим рядком
    def setHex(self, hex_string):
        try:
            self.data = [int(hex_string[i:i+8], 16) for i in range(0, len(hex_string), 8)]
        except ValueError:
            raise ValueError("Invalid hex string")

    # Метод для отримання числа у вигляді рядка шістнадцяткових символів
    def getHex(self):
        hex_string = ''.join(f'{x:08x}' for x in self.data)
        return hex_string

    # Побітова інверсія (NOT)
    def INV(self):
        result = MyBigInt()
        result.data = [~x & 0xFFFFFFFF for x in self.data]
        return result

    # Побітове виключне "або" (XOR)
    def XOR(self, other):
        result = MyBigInt()
        result.data = [x ^ y for x, y in zip(self.data, other.data)]
        return result

    # Побітове "або" (OR)
    def OR(self, other):
        result = MyBigInt()
        result.data = [x | y for x, y in zip(self.data, other.data)]
        return result

    # Побітове "і" (AND)
    def AND(self, other):
        result = MyBigInt()
        result.data = [x & y for x, y in zip(self.data, other.data)]
        return result

    # Зсув праворуч (shift right) на n бітів
    def shiftR(self, n):
        result = MyBigInt()
        result.data = [x >> n for x in self.data]
        return result

    # Зсув ліворуч (shift left) на n бітів
    def shiftL(self, n):
        result = MyBigInt()
        result.data = [x << n for x in self.data]
        return result

# Приклад використання:
if __name__ == "__main__":
    numberA = MyBigInt()
    numberB = MyBigInt()
    numberA.setHex("e035c6cfa42609b998b883bc1699df885cef74e2b2cc372eb8fa7e7")
    numberB.setHex("5072f028943e0fd5fab3273782de14b1011741bd0c5cd6ba6474330")

    # Виконання операції XOR
    numberC = numberA.XOR(numberB)
    print("XOR:", numberC.getHex())

    # Виконання інших операцій та тестування
    numberD = numberA.AND(numberB)
    print("AND:", numberD.getHex())
