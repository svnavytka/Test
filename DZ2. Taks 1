class LargeNumber:
    def __init__(self):
        self.data = []

    def set_from_hex(self, hex_string):
        try:
            # Конвертуємо рядок шістнадцяткових символів у масив беззнакових цілих чисел
            self.data = [int(hex_string[i:i+8], 16) for i in range(0, len(hex_string), 8)]
        except ValueError:
            raise ValueError("Invalid hex string")

    def get_as_hex(self):
        # Повертаємо велике число у вигляді рядка шістнадцяткових символів
        hex_string = ''.join(f'{x:08x}' for x in self.data)
        return hex_string

# Приклад використання:
if __name__ == "__main__":
    large_num = LargeNumber()
    large_num.set_from_hex("abcdef1234567890")
    print("Велике число:", large_num.get_as_hex())

"""
Реалізація власного типу даних великого числа
Головним полем вашого власного типу даних для великих чисел має бути масив беззнакових цілих чисел (unsigned integer 32 або 64). Ваш власний тип даних даних може бути реалізован у вигляді структури або класу. Окрім головного поля, ваш тип даних може містити і додаткові поля виходячи з ваших потреб.
Також треба реалізувати методи для встановлення числа і повернення числа. Найпоширеніший варіант, це метод встановлення з числа закодованого в шістнадцяткову систему числення, що передається рядком тексту (string). І відповідно метод повернення числа в шістнадцятковій системі числення у вигляді рядка тексту (string).
Крім цього, ви можете реалізувати інші методи встановлення і повернення числа, такі як байтовий масив, числа в десятичній системі числення або інші варіанти, які відповідають вашим потребам.
В якості автоматичного тестування, реалізуйте виклики методів з різними числами різної довжини і кожного разу порівнюйте вхідні дані з вихідними.
"""
